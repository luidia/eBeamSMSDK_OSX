//
//  BTNameChangeViewController.m
//  PenTestExtension
//
//  Created by Luidia on 2018. 05. 04..
//  Copyright © 2018년 Luidia. All rights reserved.
//

#import "BTNameChangeViewController.h"
#import "PNFPenLibOSXExtension.h"

#define MAXLENGTH   8

@interface BTNameChangeViewController () <NSTextViewDelegate>
{
    IBOutlet NSTextField *nameTitleLabel;
    IBOutlet NSTextView *nameTextField;
}
@end

@implementation BTNameChangeViewController
@synthesize penController;
@synthesize delegate;

- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"PNF_MSG" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"PNF_MSG" object:nil];
    
    [super dealloc];
}

- (id)initWithWindow:(NSWindow *)window
{
    self = [super initWithWindow:window];
    if (self) {
        self.delegate = nil;
    }
    return self;
}

- (BOOL)windowShouldClose:(NSWindow *)sender {
    if (self.delegate)
    {
        if ([self.delegate respondsToSelector:@selector(closeBTNameChangeViewController)])
            [self.delegate closeBTNameChangeViewController];
    }
    return YES;
}

- (void)windowDidLoad {
    [super windowDidLoad];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(PenCallBackFunc:) name:@"PNF_MSG" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(FreeLogMsg:) name:@"PNF_LOG_MSG" object:nil];
    
    [penController setRetObjForEnv:self];
    
    deviceFirstName = @"eSM-";
    [nameTitleLabel setStringValue:deviceFirstName];
    
    if(penController.isBLEConnect){
        NSString* bleName = [penController BLECurrentName];
        bleName = [bleName stringByReplacingOccurrencesOfString:deviceFirstName withString:@""];
        bleName = [bleName stringByReplacingOccurrencesOfString:@"<" withString:@""];
        bleName = [bleName stringByReplacingOccurrencesOfString:@">" withString:@""];
        bleName = [bleName stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
        if (bleName.length > 8) {
            NSRange range = {0, 8};
            bleName = [bleName substringWithRange:range];
        }
        
        [nameTextField setString:bleName];
    }
    nameTextField.delegate = self;
}

- (BOOL)stringContainsEmoji:(NSString *)string {
    __block BOOL returnValue = NO;
    [string enumerateSubstringsInRange:NSMakeRange(0, [string length]) options:NSStringEnumerationByComposedCharacterSequences usingBlock:
     ^(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop) {
         const unichar hs = [substring characterAtIndex:0];
         if (0xd800 <= hs && hs <= 0xdbff) {
             if (substring.length > 1) {
                 const unichar ls = [substring characterAtIndex:1];
                 const int uc = ((hs - 0xd800) * 0x400) + (ls - 0xdc00) + 0x10000;
                 if (0x1d000 <= uc && uc <= 0x1f77f) {
                     returnValue = YES;
                 }
             }
         } else if (substring.length > 1) {
             const unichar ls = [substring characterAtIndex:1];
             if (ls == 0x20e3) {
                 returnValue = YES;
             }
         } else {
             if (0x2100 <= hs && hs <= 0x27ff) {
                 returnValue = YES;
             } else if (0x2B05 <= hs && hs <= 0x2b07) {
                 returnValue = YES;
             } else if (0x2934 <= hs && hs <= 0x2935) {
                 returnValue = YES;
             } else if (0x3297 <= hs && hs <= 0x3299) {
                 returnValue = YES;
             } else if (hs == 0xa9 || hs == 0xae || hs == 0x303d || hs == 0x3030 || hs == 0x2b55 || hs == 0x2b1c || hs == 0x2b1b || hs == 0x2b50) {
                 returnValue = YES;
             }
         }
     }];
    return returnValue;
}

-(BOOL) textView:(NSTextView *)textView shouldChangeTextInRange:(NSRange)affectedCharRange replacementString:(NSString *)text {
    const char * _char = [text cStringUsingEncoding:NSUTF8StringEncoding];
    int isBackSpace = strcmp(_char, "\b");
    if (isBackSpace == -8) {
        return YES;
    }
    if (MAXLENGTH != -1) {
        int maxChar = MAXLENGTH;
        NSString *replacedString = [textView.string stringByReplacingCharactersInRange:affectedCharRange withString:text];
        int len = (int)[replacedString length];
        if( len > maxChar ){
            return NO;
        }
    }
    if ([self stringContainsEmoji:text]) {
        return NO;
    }
    else if ([text isEqualToString:@"`"] || [text isEqualToString:@"/"] || [text isEqualToString:@":"] ||
             [text isEqualToString:@"*"] || [text isEqualToString:@"?"] || [text isEqualToString:@"<"] ||
             [text isEqualToString:@">"] || [text isEqualToString:@"\""] || [text isEqualToString:@"₩"] ||
             [text isEqualToString:@"|"] || [text isEqualToString:@"\\"] || [text isEqualToString:@"\n"] ||
             [text isEqualToString:@"&"] || [text isEqualToString:@"+"] || [text isEqualToString:@"'"] || [text isEqualToString:@"."]
             ) {
        NSString* msg = [NSString stringWithFormat:@"' / : * ? < > \" ₩ | \\ & + \\n ' .\n%@", @"IGNORE SPECIAL CHAR"];
        
        NSAlert* alert = [[[NSAlert alloc] init] autorelease];
        [alert setMessageText:msg];
        [alert addButtonWithTitle:@"OK"];
        [alert setAlertStyle:NSInformationalAlertStyle];
        [alert runModal];
        return NO;
    }
    NSCharacterSet *nonNumberSet = [[NSCharacterSet characterSetWithCharactersInString:@"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz "] invertedSet];
    if (!([text stringByTrimmingCharactersInSet:nonNumberSet].length > 0))
        return NO;
    
    return YES;
}

-(void) PenCallBackFunc:(NSNotification *)call {
    NSString * szS = (NSString *) [call object];
    
    if ([szS isEqualToString:@"ChangeDeviceName_OK"]) {
        NSAlert* alert = [[[NSAlert alloc] init] autorelease];
        [alert addButtonWithTitle:@"OK"];
        [alert setMessageText:@"Change name Complete."];
        [alert setAlertStyle:NSInformationalAlertStyle];
        [alert beginSheetModalForWindow:self.window
                          modalDelegate:self
                         didEndSelector:@selector(changeNameSuccess)
                            contextInfo:NULL];
    }
    else if ([szS isEqualToString:@"ChangeDeviceName_FAIL"] || [szS isEqualToString:@"DI_SEND_ERR"]) {
        NSAlert* alert = [[[NSAlert alloc] init] autorelease];
        [alert addButtonWithTitle:@"OK"];
        [alert setMessageText:@"Change name fail."];
        [alert setAlertStyle:NSInformationalAlertStyle];
        [alert beginSheetModalForWindow:self.window
                          modalDelegate:self
                         didEndSelector:@selector(changeNameFail)
                            contextInfo:NULL];
    }
}

- (void) FreeLogMsg:(NSNotification *) note {
    NSString * szS = (NSString *) [note object];
    if ([szS compare:@"FAIL_LISTENING"] == 0 ) {
        
    }
    else if ([szS isEqualToString:@"CONNECTED"]) {
        
    }
    else if ([szS isEqualToString:@"INVALID_PROTOCOL"]) {
        
    }
    else if ([szS isEqualToString:@"SESSION_CLOSED"]) {
        if (self.delegate)
        {
            if ([self.delegate respondsToSelector:@selector(closeBTNameChangeViewController)])
                [self.delegate closeBTNameChangeViewController];
        }
    }
    else if ([szS isEqualToString:@"PEN_RMD_ERROR"]) {
        
    }
    else if ([szS isEqualToString:@"FIRST_DATA_RECV"]) {
    }
}

- (IBAction)changeClicked:(id)sender {
    NSString* changeName = [nameTextField.string stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    
    if ([changeName isEqualToString:@""]) {
        NSString* bleName = [penController BLECurrentName];
        bleName = [bleName stringByReplacingOccurrencesOfString:deviceFirstName withString:@""];
        bleName = [bleName stringByReplacingOccurrencesOfString:@"<" withString:@""];
        bleName = [bleName stringByReplacingOccurrencesOfString:@">" withString:@""];
        bleName = [bleName stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
        if (bleName.length > 8) {
            NSRange range = {0, 8};
            bleName = [bleName substringWithRange:range];
        }
        [nameTextField setString:bleName];
    }else{
        NSString* bleName = [penController BLECurrentName];
        bleName = [bleName stringByReplacingOccurrencesOfString:deviceFirstName withString:@""];
        bleName = [bleName stringByReplacingOccurrencesOfString:@"<" withString:@""];
        bleName = [bleName stringByReplacingOccurrencesOfString:@">" withString:@""];
        bleName = [bleName stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
        if (bleName.length > 8) {
            NSRange range = {0, 8};
            bleName = [bleName substringWithRange:range];
        }
        if([changeName isEqualToString:bleName]) {
            
        }else{
            [penController changeDeviceName:changeName];
        }
    }
}

-(void)changeNameSuccess {
    if (self.delegate)
    {
        if ([self.delegate respondsToSelector:@selector(successBTNameChangeViewController)])
            [self.delegate successBTNameChangeViewController];
    }
}

-(void)changeNameFail {
    if (self.delegate)
    {
        if ([self.delegate respondsToSelector:@selector(closeBTNameChangeViewController)])
            [self.delegate closeBTNameChangeViewController];
    }
}

@end

