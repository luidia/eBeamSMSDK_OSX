//
//  MarkerCalibrationViewController.m
//  PenTestOSX
//
//  Created by Luidia on 2019
//  Copyright © 2019년 Luidia. All rights reserved.
//

#import "MarkerCalibrationViewController.h"
#import "PNFPenLibOSXExtension.h"

enum CaliType {
    CaliType_SmartMarker_Top = 1,
    CaliType_SmartMarker_Left,
    CaliType_SmartMarker_Right,
    CaliType_SmartMarker_Bottom,
    CaliType_SmartMarker_Both,
};

@interface MarkerCalibrationViewController ()
{
    IBOutlet NSButton *retryBtn;
    
    IBOutlet NSButton *eBeam_Left;
    IBOutlet NSButton *eBeam_Top;
    IBOutlet NSButton *eBeam_Right;
    IBOutlet NSButton *eBeam_Bottom;
    IBOutlet NSButton *eBeam_Both;
    
    IBOutlet NSImageView *eBeam_Point1;
    IBOutlet NSImageView *eBeam_Point1_Done;
    IBOutlet NSImageView *eBeam_Point2;
    
    enum CaliType type;
    int calPointCnt;
    int count;
    int saveStationPosition;
    CGPoint m_CalResultPoint[4];
    CGPoint m_CalResultPointTemp[4];
}
@end

@implementation MarkerCalibrationViewController
@synthesize penController;
@synthesize delegate;

- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"PNF_PEN_READ_DATA" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"PNF_LOG_MSG" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"PNF_MSG" object:nil];
    
    [super dealloc];
}

- (id)initWithWindow:(NSWindow *)window
{
    self = [super initWithWindow:window];
    if (self) {
        self.delegate = nil;
    }
    return self;
}

- (BOOL)windowShouldClose:(NSWindow *)sender {
    [penController setStationPositionForCalibration:saveStationPosition];
    
    if (self.delegate)
    {
        if ([self.delegate respondsToSelector:@selector(closeMarkerCalibrationViewController)])
            [self.delegate closeMarkerCalibrationViewController];
    }
    return YES;
}

- (void)windowDidLoad
{
    [super windowDidLoad];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(PenHandlerWithMsg:) name:@"PNF_PEN_READ_DATA" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(FreeLogMsg:) name:@"PNF_LOG_MSG" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(PenCallBackFunc:) name:@"PNF_MSG" object:nil];
    
    [penController setRetObj:self];
    [penController setRetObjForEnv:self];
    
    type = CaliType_SmartMarker_Top;
    
    saveStationPosition = penController.StationPosition;
    if (penController.StationPosition == DIRECTION_TOP) {
        type = CaliType_SmartMarker_Top;
    }
    else if (penController.StationPosition == DIRECTION_BOTTOM) {
        type = CaliType_SmartMarker_Bottom;
    }
    else if (penController.StationPosition == DIRECTION_RIGHT) {
        type = CaliType_SmartMarker_Right;
    }
    else if (penController.StationPosition == DIRECTION_BOTH) {
        type = CaliType_SmartMarker_Both;
    }
    else {
        type = CaliType_SmartMarker_Left;
    }
    
    if (penController) {
        [penController EndReadQ];
    }
    [penController startCalibrationMode];
    
    [self InitData];
}

- (void) InitData {
    count = 0;
    calPointCnt = 2;

    if (type == CaliType_SmartMarker_Top) {
        eBeam_Top.alphaValue = 1.0f;

        eBeam_Left.alphaValue = 0.3f;
        eBeam_Right.alphaValue = 0.3f;
        eBeam_Bottom.alphaValue = 0.3f;
        eBeam_Both.alphaValue = 0.3f;
    }
    else if (type == CaliType_SmartMarker_Bottom) {
        eBeam_Bottom.alphaValue = 1.0f;

        eBeam_Left.alphaValue = 0.3f;
        eBeam_Right.alphaValue = 0.3f;
        eBeam_Top.alphaValue = 0.3f;
        eBeam_Both.alphaValue = 0.3f;
    }
    else if (type == CaliType_SmartMarker_Right) {
        eBeam_Right.alphaValue = 1.0f;

        eBeam_Left.alphaValue = 0.3f;
        eBeam_Bottom.alphaValue = 0.3f;
        eBeam_Top.alphaValue = 0.3f;
        eBeam_Both.alphaValue = 0.3f;
    }
    else if (type == CaliType_SmartMarker_Both) {
        eBeam_Both.alphaValue = 1.0f;

        eBeam_Left.alphaValue = 0.3f;
        eBeam_Bottom.alphaValue = 0.3f;
        eBeam_Top.alphaValue = 0.3f;
        eBeam_Right.alphaValue = 0.3f;
    }
    else {
        eBeam_Left.alphaValue = 1.0f;

        eBeam_Both.alphaValue = 0.3f;
        eBeam_Bottom.alphaValue = 0.3f;
        eBeam_Top.alphaValue = 0.3f;
        eBeam_Right.alphaValue = 0.3f;
    }
    
    eBeam_Point1.alphaValue = 1.0f;
    eBeam_Point2.alphaValue = 1.0f;
    
    [eBeam_Point2 setImage:[NSImage imageNamed:@"paper_set_02_off"]];
}

- (IBAction)retryClicked:(id)sender {
    [self InitData];
}

- (IBAction)eBeam_Left_Clicked:(id)sender {
    if (type == CaliType_SmartMarker_Left)
        return;

    type = CaliType_SmartMarker_Left;

    eBeam_Left.alphaValue = 1.0f;

    eBeam_Both.alphaValue = 0.3f;
    eBeam_Bottom.alphaValue = 0.3f;
    eBeam_Top.alphaValue = 0.3f;
    eBeam_Right.alphaValue = 0.3f;

    [penController setStationPositionForCalibration:(enum DEVICE_DIRECTION)type];

    [self retryClicked:nil];
}
- (IBAction)eBeam_Top_Clicked:(id)sender {
    if (type == CaliType_SmartMarker_Top)
        return;

    type = CaliType_SmartMarker_Top;

    eBeam_Top.alphaValue = 1.0f;

    eBeam_Both.alphaValue = 0.3f;
    eBeam_Bottom.alphaValue = 0.3f;
    eBeam_Left.alphaValue = 0.3f;
    eBeam_Right.alphaValue = 0.3f;

    [penController setStationPositionForCalibration:(enum DEVICE_DIRECTION)type];

    [self retryClicked:nil];
}
- (IBAction)eBeam_right_Clicked:(id)sender {
    if (type == CaliType_SmartMarker_Right)
        return;

    type = CaliType_SmartMarker_Right;

    eBeam_Right.alphaValue = 1.0f;

    eBeam_Both.alphaValue = 0.3f;
    eBeam_Bottom.alphaValue = 0.3f;
    eBeam_Left.alphaValue = 0.3f;
    eBeam_Top.alphaValue = 0.3f;

    [penController setStationPositionForCalibration:(enum DEVICE_DIRECTION)type];

    [self retryClicked:nil];
}
- (IBAction)eBeam_Bottom_Clicked:(id)sender {
    if (type == CaliType_SmartMarker_Bottom)
        return;

    type = CaliType_SmartMarker_Bottom;

    eBeam_Bottom.alphaValue = 1.0f;

    eBeam_Both.alphaValue = 0.3f;
    eBeam_Right.alphaValue = 0.3f;
    eBeam_Left.alphaValue = 0.3f;
    eBeam_Top.alphaValue = 0.3f;

    [penController setStationPositionForCalibration:(enum DEVICE_DIRECTION)type];

    [self retryClicked:nil];
}

- (IBAction)eBeam_Both_Clicked:(id)sender {
    if (type == CaliType_SmartMarker_Both)
        return;

    type = CaliType_SmartMarker_Both;

    eBeam_Both.alphaValue = 1.0f;

    eBeam_Bottom.alphaValue = 0.3f;
    eBeam_Right.alphaValue = 0.3f;
    eBeam_Left.alphaValue = 0.3f;
    eBeam_Top.alphaValue = 0.3f;

    [penController setStationPositionForCalibration:(enum DEVICE_DIRECTION)type];

    [self retryClicked:nil];
}

- (void) FreeLogMsg:(NSNotification *) note {
    NSString * szS = (NSString *) [note object];
    if ([szS compare:@"FAIL_LISTENING"] == 0 ) {
        
    }
    else if ([szS isEqualToString:@"CONNECTED"]) {

    }
    else if ([szS isEqualToString:@"INVALID_PROTOCOL"]) {

    }
    else if ([szS isEqualToString:@"SESSION_CLOSED"]) {
        [penController setStationPositionForCalibration:saveStationPosition];
        
        if (self.delegate)
        {
            if ([self.delegate respondsToSelector:@selector(closeMarkerCalibrationViewController)])
                [self.delegate closeMarkerCalibrationViewController];
        }
    }
    else if ([szS isEqualToString:@"PEN_RMD_ERROR"]) {

    }
    else if ([szS isEqualToString:@"FIRST_DATA_RECV"]) {
    }
}

-(void) PenCallBackFunc:(NSNotification *)call {
    NSString * szS = (NSString *) [call object];
    if ([szS isEqualToString:@"CALIBRATION_SAVE_OK"]) {
        NSAlert* alert = [[[NSAlert alloc] init] autorelease];
        [alert addButtonWithTitle:@"OK"];
        [alert setMessageText:@"change calbration complete"];
        [alert setAlertStyle:NSInformationalAlertStyle];
        [alert beginSheetModalForWindow:[NSApp mainWindow]
                          modalDelegate:self
                         didEndSelector:@selector(calibrationSettingSuccess)
                            contextInfo:NULL];
    }
    else if ([szS isEqualToString:@"CALIBRATION_SAVE_FAIL"] || [szS isEqualToString:@"DI_SEND_ERR"]) {
        NSAlert* alert = [[[NSAlert alloc] init] autorelease];
        [alert addButtonWithTitle:@"OK"];
        [alert setMessageText:@"change calbration fail"];
        [alert setAlertStyle:NSInformationalAlertStyle];
        [alert beginSheetModalForWindow:[NSApp mainWindow]
                          modalDelegate:self
                         didEndSelector:@selector(calibrationSettingFail)
                            contextInfo:NULL];
    }
}

-(void) PenHandlerWithMsg:(NSNotification*) note
{
    NSDictionary* dic = [note object];
    if ([penController getRetObj] != self)
        return;
    [self PenHandlerWithDictionary:dic];
}
-(void) PenHandlerWithDictionary:(NSDictionary*) dic
{
    int PenStatus  = [[dic objectForKey:@"PenStatus"] intValue];
    CGPoint ptRaw = [[dic objectForKey:@"ptRaw"] pointValue];
    CGPoint ptConv = [[dic objectForKey:@"ptConv"] pointValue];
    int Temperature = [[dic objectForKey:@"Temperature"] intValue];
    int modelCode = [[dic objectForKey:@"modelCode"] intValue];
    int SMPenFlag = [[dic objectForKey:@"SMPenFlag"] intValue];
    int SMPenState = [[dic objectForKey:@"SMPenState"] intValue];
    int press = [[dic objectForKey:@"pressure"] intValue];
    
    [self PenHandlerWithArgs:ptRaw
                      ptConv:ptConv
                   PenStatus:PenStatus
                 Temperature:Temperature
                   ModelCode:modelCode
                   SMPenFlag:SMPenFlag
                  SMPenState:SMPenState
                    Pressure:press];
}

-(void) PenHandlerWithArgs:(CGPoint) Arg_ptRaw ptConv:(CGPoint) Arg_ptConv PenStatus:(int) Arg_PenStatus
               Temperature:(int) Arg_Temperature ModelCode:(int) Arg_modelCode
                SMPenFlag :(int) Arg_SMPenFlag SMPenState:(int) Arg_SMPenState
                  Pressure:(int) Arg_pressure
{
    if (count == calPointCnt) {
        return;
    }

    int rightDataFlag = (Arg_SMPenFlag & 0x01);

    if (type == CaliType_SmartMarker_Right) {
        if (rightDataFlag) {
            return;
        }
    }else{
        if (!rightDataFlag) {
            return;
        }
    }

    switch (Arg_PenStatus) {
        case PEN_UP: {
            m_CalResultPointTemp[count].x = Arg_ptRaw.x;
            m_CalResultPointTemp[count].y = Arg_ptRaw.y;
            count++;

            if (count == calPointCnt) {
                if (type == CaliType_SmartMarker_Right) {
                    CGPoint tCali[2];
                    tCali[0].x = m_CalResultPointTemp[1].x;
                    tCali[0].y = m_CalResultPointTemp[0].y;
                    tCali[1].x = m_CalResultPointTemp[0].x;
                    tCali[1].y = m_CalResultPointTemp[1].y;
                    m_CalResultPointTemp[0] = tCali[0];
                    m_CalResultPointTemp[1] = tCali[1];
                }

                [NSTimer scheduledTimerWithTimeInterval:0.1f
                                                 target:self
                                               selector:@selector(runApplyProcess)
                                               userInfo:nil
                                                repeats:NO];

                return;
            }
            
            [eBeam_Point1 setAlphaValue:0.0];
            [eBeam_Point2 setAlphaValue:1.0];

            [eBeam_Point2 setImage:[NSImage imageNamed:@"paper_set_02_on"]];
            
        }
    }
}

-(void) runApplyProcess {
    m_CalResultPoint[0].x = m_CalResultPointTemp[0].x;
    m_CalResultPoint[0].y = m_CalResultPointTemp[0].y;
    m_CalResultPoint[1].x = m_CalResultPointTemp[0].x;
    m_CalResultPoint[1].y = m_CalResultPointTemp[1].y;
    m_CalResultPoint[2].x = m_CalResultPointTemp[1].x;
    m_CalResultPoint[2].y = m_CalResultPointTemp[1].y;
    m_CalResultPoint[3].x = m_CalResultPointTemp[1].x;
    m_CalResultPoint[3].y = m_CalResultPointTemp[0].y;

    if (m_CalResultPoint[0].x > m_CalResultPoint[2].x ||
        m_CalResultPoint[0].y > m_CalResultPoint[2].y) {
        NSAlert* alert = [[[NSAlert alloc] init] autorelease];
        [alert addButtonWithTitle:@"Retry"];
        [alert setMessageText:@"pen data error"];
        [alert setAlertStyle:NSInformationalAlertStyle];
        [alert beginSheetModalForWindow:[NSApp mainWindow]
                          modalDelegate:self
                         didEndSelector:@selector(retryClicked:)
                            contextInfo:NULL];
        return;
    }

    if (m_CalResultPoint[2].x - m_CalResultPoint[0].x < 2400 ||
        m_CalResultPoint[1].y - m_CalResultPoint[0].y < 2400) {
        NSAlert* alert = [[[NSAlert alloc] init] autorelease];
        [alert addButtonWithTitle:@"Retry"];
        [alert setMessageText:@"small area error"];
        [alert setAlertStyle:NSInformationalAlertStyle];
        [alert beginSheetModalForWindow:[NSApp mainWindow]
                          modalDelegate:self
                         didEndSelector:@selector(retryClicked:)
                            contextInfo:NULL];
        return;
    }

    m_CalResultPoint[0].x = m_CalResultPointTemp[0].x;
    m_CalResultPoint[0].y = m_CalResultPointTemp[0].y;
    m_CalResultPoint[1].x = m_CalResultPointTemp[0].x;
    m_CalResultPoint[1].y = m_CalResultPointTemp[1].y;
    m_CalResultPoint[2].x = m_CalResultPointTemp[1].x;
    m_CalResultPoint[2].y = m_CalResultPointTemp[1].y;
    m_CalResultPoint[3].x = m_CalResultPointTemp[1].x;
    m_CalResultPoint[3].y = m_CalResultPointTemp[0].y;
    
    [penController sendCalibrationDataToDevice:(enum DEVICE_DIRECTION)type CalibPoint:m_CalResultPoint];
}

-(void)calibrationSettingSuccess {
    if (self.delegate)
    {
        if ([self.delegate respondsToSelector:@selector(successMarkerCalibrationViewController:)])
            [self.delegate successMarkerCalibrationViewController:m_CalResultPoint];
    }
}

-(void)calibrationSettingFail {
    [self retryClicked:nil];
}

@end
